<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on 一个小运维的博客</title>
    <link>https://www.llmgo.cn/categories/go/</link>
    <description>Recent content in go on 一个小运维的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 12 May 2021 10:54:48 +0800</lastBuildDate><atom:link href="https://www.llmgo.cn/categories/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>两数之和（leetcode）Go语言版本</title>
      <link>https://www.llmgo.cn/post/two-sum-go/</link>
      <pubDate>Wed, 12 May 2021 10:54:48 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/two-sum-go/</guid>
      <description>两数之和（leetcode）Go语言版本 https://leetcode-cn.com/problems/two-sum solution 1 1 2 3 4 5 6 7 8 9 10 11 12 13 func twoSum(nums []int, target int) []int { count := len(nums) var arr []int for i := 0; i &amp;lt; count; i++ { for j := i + 1; j &amp;lt; count; j++ { if</description>
    </item>
    
    <item>
      <title>Go使用gojq来解析json</title>
      <link>https://www.llmgo.cn/post/use-gojq-lib-parse-json/</link>
      <pubDate>Mon, 10 May 2021 20:55:14 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/use-gojq-lib-parse-json/</guid>
      <description>Go使用gojq来解析json 准备数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 cat &amp;lt;&amp;lt;&amp;#39;EOF&amp;#39;&amp;gt;data.json { &amp;#34;name&amp;#34;: &amp;#34;shopping cart&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;List of items in your</description>
    </item>
    
    <item>
      <title>go构建约束问题</title>
      <link>https://www.llmgo.cn/post/go-build-constraint-problem/</link>
      <pubDate>Thu, 22 Apr 2021 18:26:31 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-build-constraint-problem/</guid>
      <description>go构建约束问题 这是go的条件编译导致的，具体的方法是在go文件的第一行注释写//+build linux表明这个文件在Linux平台才能编译</description>
    </item>
    
    <item>
      <title>golang 使用websocket简单使用</title>
      <link>https://www.llmgo.cn/post/go-sample-websocket/</link>
      <pubDate>Tue, 13 Apr 2021 16:16:17 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-sample-websocket/</guid>
      <description>golang websocket简单使用 废话不多说，直接贴代码 server.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;golang.org/x/net/websocket&amp;#34; &amp;#34;net/http&amp;#34; ) func Echo(ws *websocket.Conn) { fmt.Println(&amp;#34;new</description>
    </item>
    
    <item>
      <title>go 基础之指针</title>
      <link>https://www.llmgo.cn/post/go-pointer/</link>
      <pubDate>Fri, 09 Apr 2021 10:50:17 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-pointer/</guid>
      <description>Go 语言基础之指针 不像 Java 和 .NET，Go 语言为程序员提供了控制数据结构的指针的能力；但是，你不能进行指针运算。通过给予程序员基本内存布局，Go</description>
    </item>
    
    <item>
      <title>Go使用gojsonq库来查询Json</title>
      <link>https://www.llmgo.cn/post/go-use-gojsonq-lib-query-json/</link>
      <pubDate>Thu, 08 Apr 2021 20:43:00 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-use-gojsonq-lib-query-json/</guid>
      <description>Go使用gojsonq库来查询Json 准备简单的数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 { &amp;#34;name&amp;#34;:&amp;#34;computers&amp;#34;, &amp;#34;description&amp;#34;:&amp;#34;List of computer products&amp;#34;, &amp;#34;prices&amp;#34;:[2400, 2100, 1200, 400.87, 89.90,</description>
    </item>
    
    <item>
      <title>使用接口的方式实现一个既可以往终端写日志也可以往文件写日志的简易日志库</title>
      <link>https://www.llmgo.cn/post/use-interface-loglib/</link>
      <pubDate>Thu, 08 Apr 2021 15:17:08 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/use-interface-loglib/</guid>
      <description>使用接口的方式实现一个既可以往终端写日志也可以往文件写日志的简易日志库。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34</description>
    </item>
    
    <item>
      <title>使用pm2来管理go应用进程</title>
      <link>https://www.llmgo.cn/post/use-pm2-management-go-app/</link>
      <pubDate>Thu, 08 Apr 2021 11:18:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/use-pm2-management-go-app/</guid>
      <description>使用pm2来管理go应用进程 pm2是一个进程管理工具,可以用它来管理你的node进程，并查看node进程的状态，当然也支持性能监控，进程守护</description>
    </item>
    
    <item>
      <title>go 每日练习 01</title>
      <link>https://www.llmgo.cn/post/go-test001/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test001/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strings&amp;#34; ) /* 编写一个程序，从键盘读取输</description>
    </item>
    
    <item>
      <title>go 每日练习 02</title>
      <link>https://www.llmgo.cn/post/go-test002/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test002/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;unicode&amp;#34; ) /* 9.敏感词列表 li = [&amp;#3</description>
    </item>
    
    <item>
      <title>go 每日练习 03</title>
      <link>https://www.llmgo.cn/post/go-test003/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test003/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package main /* 写一个 Season 函数，要求接受一个代表月份的数字，然后返回所代表月份所在季节的名称（不用考虑月</description>
    </item>
    
    <item>
      <title>go 每日练习 04</title>
      <link>https://www.llmgo.cn/post/go-test004/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test004/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import &amp;#34;fmt&amp;#34; // fib returns a function that returns // successive Fibonacci numbers. func fib() func() int { a, b := 0, 1 return func() int { a, b = b, a+b return a } } func main() { f := fib() // Function calls are evaluated left-to-right. fmt.Println(f(),</description>
    </item>
    
    <item>
      <title>go 每日练习 05</title>
      <link>https://www.llmgo.cn/post/go-test005/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test005/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package main /* 编写一个名字为 MySqrt 的函数，计算一个 float64 类型浮点数的平方根，如果参数是一</description>
    </item>
    
    <item>
      <title>go 每日练习 06</title>
      <link>https://www.llmgo.cn/post/go-test006/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test006/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 package main /* 练习 10.1 vcard.go： 定义结构体 Address 和 V</description>
    </item>
    
    <item>
      <title>go 每日练习 07</title>
      <link>https://www.llmgo.cn/post/go-test007/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test007/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main import &amp;#34;fmt&amp;#34; // 定义结构体 employee，它有一个 salary 字段，给这个结构体定义一个方法 giveRaise 来按照指定的百分比增</description>
    </item>
    
    <item>
      <title>go 每日练习 08</title>
      <link>https://www.llmgo.cn/post/go-test008/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test008/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 package main import ( &amp;#34;io&amp;#34; &amp;#34;os&amp;#34; ) // 实现复制文件 func copyFile(dstName, srcName string) (written int64, err error) { src, err := os.Open(srcName) if err != nil { return } defer src.Close() dst, err := os.Create(dstName)</description>
    </item>
    
    <item>
      <title>go 每日练习 09</title>
      <link>https://www.llmgo.cn/post/go-test009/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test009/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strings&amp;#34; ) // 实现cat文件 func fileCat(file string) (err error) { text, err := ioutil.ReadFile(file) if err != nil { return } fmt.Println(strings.TrimSpace(string(text))) return</description>
    </item>
    
    <item>
      <title>go 每日练习 10</title>
      <link>https://www.llmgo.cn/post/go-test010/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test010/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;io&amp;#34; &amp;#34;os&amp;#34; ) func fileCat(file string) { f, err := os.Open(file) if err != nil { panic(err) } // tmp := make([]byte, 128) var tmp []byte n, err := f.Read(tmp) if err != nil { panic(err)</description>
    </item>
    
    <item>
      <title>go 每日练习 11</title>
      <link>https://www.llmgo.cn/post/go-test011/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test011/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import ( &amp;#34;flag&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; ) var NewLine = flag.Bool(&amp;#34;n&amp;#34;, false, &amp;#34;print new line &amp;#34;) // echo -n print new line const ( Space = &amp;#34; &amp;#34; Newline = &amp;#34;\n&amp;#34; ) func main() { flag.Parse() s :=</description>
    </item>
    
    <item>
      <title>go 运行简单http服务器</title>
      <link>https://www.llmgo.cn/post/go-simple-http/</link>
      <pubDate>Wed, 07 Apr 2021 10:46:00 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-simple-http/</guid>
      <description>简单的http服务器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;net/http&amp;#34; ) // 实现一个简单的http服务 func main() { http.HandleFunc(&amp;#34;/&amp;#34;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &amp;#34;hello , you&amp;#39;ve requestend: %v\n&amp;#34;, r.URL.Path) }) http.ListenAndServe(&amp;#34;:8080&amp;#34;, nil) }</description>
    </item>
    
  </channel>
</rss>
