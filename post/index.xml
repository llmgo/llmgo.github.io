<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 一个小运维的博客</title>
    <link>https://www.llmgo.cn/post/</link>
    <description>Recent content in Posts on 一个小运维的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 03 Jun 2021 10:58:49 +0800</lastBuildDate><atom:link href="https://www.llmgo.cn/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go 每日一练
</title>
      <link>https://www.llmgo.cn/post/go-test-2021-06-03/</link>
      <pubDate>Thu, 03 Jun 2021 10:58:49 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test-2021-06-03/</guid>
      <description>go 每日一练（2021-06-03） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53</description>
    </item>
    
    <item>
      <title>systemd path 实时监控文件和目录变动
</title>
      <link>https://www.llmgo.cn/post/systemd-path/</link>
      <pubDate>Mon, 31 May 2021 17:03:36 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/systemd-path/</guid>
      <description>systemd path 实时监控文件和目录变动 [toc] systemd path工具提供了监控文件、目录变化并触发执行指定操作的功能。 有时候这种监控功能是非常实用的，比如监控到/et</description>
    </item>
    
    <item>
      <title>Wg Gen Web 使用
</title>
      <link>https://www.llmgo.cn/post/wg-gen-web/</link>
      <pubDate>Mon, 31 May 2021 11:46:24 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/wg-gen-web/</guid>
      <description>Wg Gen Web 用于WireGuard的基于Web的简单配置生成器。 为什么是Wg Gen Web？ 所有WireGuard UI实施都试图通过应用配置和创建网络规</description>
    </item>
    
    <item>
      <title>WireGuard 的搭建使用与配置详解
</title>
      <link>https://www.llmgo.cn/post/wireguard-docs-practice/</link>
      <pubDate>Fri, 28 May 2021 16:41:16 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/wireguard-docs-practice/</guid>
      <description>WireGuard 的搭建使用与配置详解 一、快速开始 1. 安装 centos 7 1 2 3 4 5 6 7 8 $ yum install epel-release https://www.elrepo.org/elrepo-release-7.el7.elrepo.noarch.rpm $ yum install yum-plugin-elrepo $ yum install kmod-wireguard wireguard-tools # 如果你使用的是非标准内核，需要安装 DKMS 包 $ yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm $ curl</description>
    </item>
    
    <item>
      <title>WireGuard 的工作原理
</title>
      <link>https://www.llmgo.cn/post/wireguard-working-principle/</link>
      <pubDate>Fri, 28 May 2021 15:47:09 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/wireguard-working-principle/</guid>
      <description>WireGuard 的工作原理 WireGuard 是由 Jason Donenfeld 等人用 C 语言编写的一个开源 VPN 协议，被视为下一代 VPN 协议，旨在解决许多困扰 IPSec/IKEv2、OpenVPN 或 L2TP 等其他</description>
    </item>
    
    <item>
      <title>wireguard 快速安装教程
</title>
      <link>https://www.llmgo.cn/post/wireguard-quick-start-docs/</link>
      <pubDate>Fri, 28 May 2021 15:16:26 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/wireguard-quick-start-docs/</guid>
      <description>wireguard 快速安装教程 [toc] WireGuard 的安装和使用条件非常苛刻，对内核版本要求极高，不仅如此，在不同的系统中，内核，内核源码包，内核头文件必须存在且这三者版本要</description>
    </item>
    
    <item>
      <title>systemd 启动时报错 Permission denied
</title>
      <link>https://www.llmgo.cn/post/systemd-startup-permission-denied/</link>
      <pubDate>Tue, 25 May 2021 17:31:19 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/systemd-startup-permission-denied/</guid>
      <description>systemd 启动时报错 Permission denied 文件权限正确，但是通过 systemd启动时仍然报 Permission denied 错误。 1 2 May 25 17:19:33 rocky-linux systemd[36839]: stargz-snapshotter.service: Failed to execute command: Permission denied May 25 17:19:33 rocky-linux systemd[36839]: stargz-snapshotter.service: Failed at step EXEC spawning /usr/local/bin/containerd-stargz 解决方案 是 SELinux 搞</description>
    </item>
    
    <item>
      <title>prometheus 通过命令热加载
</title>
      <link>https://www.llmgo.cn/post/prometheus-reload/</link>
      <pubDate>Mon, 24 May 2021 17:36:31 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/prometheus-reload/</guid>
      <description>prometheus 通过命令热加载 1 2 $ curl -XPOST localhost:9090/-/reload Lifecycle API is not enabled. 添加--web.enable-lifecycle参数 1 2 3 4 5 Type=simple User=prometheus ExecStart=/data1/prometheus/prometheus --config.file=/data1/prometheus/prometheus.yml --storage.tsdb.path=/data1/prometheus/data --web.enable-lifecycle ExecReload=/bin/kill -HUP Restart=on-failure</description>
    </item>
    
    <item>
      <title>harbor exporter
</title>
      <link>https://www.llmgo.cn/post/harbor_exporter/</link>
      <pubDate>Mon, 24 May 2021 17:20:18 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/harbor_exporter/</guid>
      <description>harbor exporter https://github.com/c4po/harbor_exporter https://github.com/zhangguanzhang/harbor_exporter 我更喜欢第一个 现在harbor2.2.0以后配置文件可以启用metrics https://goharbor.io/docs/2.2.0/administration/metrics/</description>
    </item>
    
    <item>
      <title>利用gopsutil库来获取mac内存信息
</title>
      <link>https://www.llmgo.cn/post/use-gopsutil-lib-get-mem-info/</link>
      <pubDate>Tue, 18 May 2021 19:31:55 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/use-gopsutil-lib-get-mem-info/</guid>
      <description>利用gopsutil库来获取mac内存信息 由于mac上没有free命令来查看内存使用，所以可以利用gopsutil来获取内存信息来展示 代码：</description>
    </item>
    
    <item>
      <title>kubernetes 重启的几种方法
</title>
      <link>https://www.llmgo.cn/post/the-way-restart-kubernetes/</link>
      <pubDate>Thu, 13 May 2021 19:57:39 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/the-way-restart-kubernetes/</guid>
      <description>kubernetes 重启的几种方法 方法1 1 2 kubectl scale deployment XXXX --replicas=0 -n &amp;lt;NAMESPACE&amp;gt; kubectl scale deployment XXXX --replicas=1 -n &amp;lt;NAMESPACE&amp;gt; 方法2 1 kubectl delete pod &amp;lt;POD_NAME&amp;gt; -n &amp;lt;NAMESPACE&amp;gt; 方法3 1 kubectl get pod &amp;lt;POD_NAME&amp;gt; -n &amp;lt;NAMESPACE&amp;gt; -o yaml | kubectl replace --force -f - 方法4 Kubernetes 1.15开始才有 1 kubectl rollout</description>
    </item>
    
    <item>
      <title>Golang sync.WaitGroup 的用法
</title>
      <link>https://www.llmgo.cn/post/usage-of-golang-sync-waitgroup/</link>
      <pubDate>Wed, 12 May 2021 16:36:06 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/usage-of-golang-sync-waitgroup/</guid>
      <description>Golang sync.WaitGroup 的用法 介绍 经常会看到一下代码 1 2 3 4 5 6 7 8 9 10 11 12 13 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;time&amp;#34; ) func main(){ for i := 0; i &amp;lt; 100 ; i++{ go fmt.Println(i) } time.Sleep(time.Second) } 主线程为了等待goroutine都运</description>
    </item>
    
    <item>
      <title>两数之和（leetcode）Go语言版本</title>
      <link>https://www.llmgo.cn/post/two-sum-go/</link>
      <pubDate>Wed, 12 May 2021 10:54:48 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/two-sum-go/</guid>
      <description>两数之和（leetcode）Go语言版本 https://leetcode-cn.com/problems/two-sum solution 1 1 2 3 4 5 6 7 8 9 10 11 12 13 func twoSum(nums []int, target int) []int { count := len(nums) var arr []int for i := 0; i &amp;lt; count; i++ { for j := i + 1; j &amp;lt; count; j++ { if</description>
    </item>
    
    <item>
      <title>Go使用gojq来解析json</title>
      <link>https://www.llmgo.cn/post/use-gojq-lib-parse-json/</link>
      <pubDate>Mon, 10 May 2021 20:55:14 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/use-gojq-lib-parse-json/</guid>
      <description>Go使用gojq来解析json 准备数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 cat &amp;lt;&amp;lt;&amp;#39;EOF&amp;#39;&amp;gt;data.json { &amp;#34;name&amp;#34;: &amp;#34;shopping cart&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;List of items in your</description>
    </item>
    
    <item>
      <title>buildah 简单使用</title>
      <link>https://www.llmgo.cn/post/buildah-simple-to-use/</link>
      <pubDate>Sat, 08 May 2021 17:11:24 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/buildah-simple-to-use/</guid>
      <description>buildah 简单使用 buildah 构建镜像的优势 兼容Dockerfile 不依赖docker daemon 下载buildah 1 yum install -y buildah 构建镜像 1 buildah bud -t harbor.example.com/library/app:v1 -f Dockerfile . 登陆 1 buildah login --tls-verify=false harbor.example.com 推送</description>
    </item>
    
    <item>
      <title>好用的文件服务器</title>
      <link>https://www.llmgo.cn/post/easy-to-use-file-servermd/</link>
      <pubDate>Thu, 29 Apr 2021 15:25:21 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/easy-to-use-file-servermd/</guid>
      <description>好用的文件服务器 这里记录一下好用的三个文件服务器 https://github.com/filebrowser/filebrowser https://github.com/silverwind/droppy http://iscute.cn/chfs</description>
    </item>
    
    <item>
      <title>使用caddy作为文件服务器</title>
      <link>https://www.llmgo.cn/post/use-caddy-as-fileserver/</link>
      <pubDate>Mon, 26 Apr 2021 15:20:02 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/use-caddy-as-fileserver/</guid>
      <description>使用caddy作为文件服务器 对比nginx优势 界面比nginx好看一万倍 自动https证书 配置简单一万倍 废话不多说，开始 安装caddy https://caddyserver.com/download https://github.com/caddyserver/caddy/releases/ 1</description>
    </item>
    
    <item>
      <title>go构建约束问题</title>
      <link>https://www.llmgo.cn/post/go-build-constraint-problem/</link>
      <pubDate>Thu, 22 Apr 2021 18:26:31 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-build-constraint-problem/</guid>
      <description>go构建约束问题 这是go的条件编译导致的，具体的方法是在go文件的第一行注释写//+build linux表明这个文件在Linux平台才能编译</description>
    </item>
    
    <item>
      <title>日志切割神器logrotate</title>
      <link>https://www.llmgo.cn/post/logrotate/</link>
      <pubDate>Wed, 14 Apr 2021 16:01:56 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/logrotate/</guid>
      <description>日志切割神器logrotate [toc] logrotate 是一个 linux 系统日志的管理工具。可以对单个日志文件或者某个目录下的文件按时间 / 大小进行切割，压缩操作；指定日志</description>
    </item>
    
    <item>
      <title>golang 使用websocket简单使用</title>
      <link>https://www.llmgo.cn/post/go-sample-websocket/</link>
      <pubDate>Tue, 13 Apr 2021 16:16:17 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-sample-websocket/</guid>
      <description>golang websocket简单使用 废话不多说，直接贴代码 server.go 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;golang.org/x/net/websocket&amp;#34; &amp;#34;net/http&amp;#34; ) func Echo(ws *websocket.Conn) { fmt.Println(&amp;#34;new</description>
    </item>
    
  </channel>
</rss>
