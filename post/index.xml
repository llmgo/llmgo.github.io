<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 一个小运维的博客</title>
    <link>https://www.llmgo.cn/post/</link>
    <description>Recent content in Posts on 一个小运维的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 09 Apr 2021 14:08:17 +0800</lastBuildDate><atom:link href="https://www.llmgo.cn/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>git 常用命令</title>
      <link>https://www.llmgo.cn/post/git-commands/</link>
      <pubDate>Fri, 09 Apr 2021 14:08:17 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/git-commands/</guid>
      <description>Git 全局设置 1 2 git config --global user.name &amp;#34;Administrator&amp;#34; git config --global user.email &amp;#34;admin@example.com&amp;#34; 创建新版本库 1 2 3 4 5 6 git clone git@code.aliyun.com:llmgo/test.git cd test touch README.md git add README.md git commit -m &amp;#34;add README&amp;#34; git push -u origin master 已存在的文件夹或 Git 仓库 1 2 3 4 5 6 cd existing_folder git init</description>
    </item>
    
    <item>
      <title>go 基础之指针</title>
      <link>https://www.llmgo.cn/post/go-pointer/</link>
      <pubDate>Fri, 09 Apr 2021 10:50:17 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-pointer/</guid>
      <description>Go 语言基础之指针 不像 Java 和 .NET，Go 语言为程序员提供了控制数据结构的指针的能力；但是，你不能进行指针运算。通过给予程序员基本内存布局，Go</description>
    </item>
    
    <item>
      <title>Go使用gojsonq库来查询Json</title>
      <link>https://www.llmgo.cn/post/go-use-gojsonq-lib-query-json/</link>
      <pubDate>Thu, 08 Apr 2021 20:43:00 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-use-gojsonq-lib-query-json/</guid>
      <description>Go使用gojsonq库来查询Json 准备简单的数据 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 { &amp;#34;name&amp;#34;:&amp;#34;computers&amp;#34;, &amp;#34;description&amp;#34;:&amp;#34;List of computer products&amp;#34;, &amp;#34;prices&amp;#34;:[2400, 2100, 1200, 400.87, 89.90,</description>
    </item>
    
    <item>
      <title>使用接口的方式实现一个既可以往终端写日志也可以往文件写日志的简易日志库</title>
      <link>https://www.llmgo.cn/post/use-interface-loglib/</link>
      <pubDate>Thu, 08 Apr 2021 15:17:08 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/use-interface-loglib/</guid>
      <description>使用接口的方式实现一个既可以往终端写日志也可以往文件写日志的简易日志库。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34</description>
    </item>
    
    <item>
      <title>使用pm2来管理go应用进程</title>
      <link>https://www.llmgo.cn/post/use-pm2-management-go-app/</link>
      <pubDate>Thu, 08 Apr 2021 11:18:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/use-pm2-management-go-app/</guid>
      <description>使用pm2来管理go应用进程 pm2是一个进程管理工具,可以用它来管理你的node进程，并查看node进程的状态，当然也支持性能监控，进程守护</description>
    </item>
    
    <item>
      <title>Jenkins 利用Build Name and Description Setter插件在build history输出信息</title>
      <link>https://www.llmgo.cn/post/jenkins-output-infomation-in-buildhistory/</link>
      <pubDate>Wed, 07 Apr 2021 11:11:53 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/jenkins-output-infomation-in-buildhistory/</guid>
      <description>Jenkins 利用Build Name and Description Setter插件在build history输出信息 插件名称：Build Name and Description Setter Pipeline语法 1 2 3 4 5 6 7 stage(&amp;#34;Initialization&amp;#34;) { steps</description>
    </item>
    
    <item>
      <title>Jenkins WebHook 自动构建</title>
      <link>https://www.llmgo.cn/post/jenkins-webhook-autobuild/</link>
      <pubDate>Wed, 07 Apr 2021 11:10:17 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/jenkins-webhook-autobuild/</guid>
      <description>Jenkins WebHook 自动构建 [toc] 1. 安装 Gitlab Hook 插件 需要安装两个插件： Gitlab Hook GitLab 2. Jenkins Job设置自动构建 点击右下角的ADCANCED,构建一个Secret token 3. Gitlab 设置web</description>
    </item>
    
    <item>
      <title>Java 应用cpu占用高排查思路</title>
      <link>https://www.llmgo.cn/post/java-project-high-cpu-usage/</link>
      <pubDate>Wed, 07 Apr 2021 11:08:33 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/java-project-high-cpu-usage/</guid>
      <description>Java 项目CPU占用高排查 [toc] 一、分析问题 cpu占用高一般来说是项目本身自发导致的，自发包括定时任务和死循环，而具体哪一段代码也确定不了， 现在我们</description>
    </item>
    
    <item>
      <title>pinpoint 告警配置</title>
      <link>https://www.llmgo.cn/post/pinpoint-alert-config/</link>
      <pubDate>Wed, 07 Apr 2021 11:06:08 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/pinpoint-alert-config/</guid>
      <description>Pinpoint 告警配置 新建一个组，添加2个成员 组必须是以数字构成 选择告警 添加告警 告警类型 以下规则中，请求是当前应用发送出去的，当前应用是请求的发起者。 类</description>
    </item>
    
    <item>
      <title>apm 软件pinpoint 安装</title>
      <link>https://www.llmgo.cn/post/pinpoint-install/</link>
      <pubDate>Wed, 07 Apr 2021 11:05:38 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/pinpoint-install/</guid>
      <description>APM软件Pinpoint 安装 APM（Application Performance Management）应用性能管理 [toc] 项目地址：https://github.c</description>
    </item>
    
    <item>
      <title>spring cloud gateway访问不了注册的地址</title>
      <link>https://www.llmgo.cn/post/spring-cloud-gateway-name-or-service-not-known/</link>
      <pubDate>Wed, 07 Apr 2021 11:04:47 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/spring-cloud-gateway-name-or-service-not-known/</guid>
      <description>spring cloud gateway 报错 Name or service not known 是这样的，eureka、gateway和普通的微服务在本地是OK的， 部署到k8s后，通过gateway访问某个微服务就报</description>
    </item>
    
    <item>
      <title>spring boot 项目设置相关探测</title>
      <link>https://www.llmgo.cn/post/spring-boot-proj-prob/</link>
      <pubDate>Wed, 07 Apr 2021 11:03:37 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/spring-boot-proj-prob/</guid>
      <description>sping boot 项目设置探测 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 containers:- name:helloworldimage:mydlqclub/springboot-helloworld:0.0.1ports:- name:servercontainerPort:8080readinessProbe:initialDelaySeconds:20periodSeconds:5timeoutSeconds:10httpGet:scheme:HTTPport:serverpath:/actuator/healthlivenessProbe:initialDelaySeconds:30periodSeconds:10timeoutSeconds:5httpGet:scheme:HTTPport:serverpath:/actuator/health https://kubernetes.io/zh/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/ https://blog.csdn.net/qq_32641153/article/details/100614499</description>
    </item>
    
    <item>
      <title>kubernetes svc externalTrafficPolicy 字段</title>
      <link>https://www.llmgo.cn/post/kubernetes-externaltrafficpolicy/</link>
      <pubDate>Wed, 07 Apr 2021 11:01:52 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/kubernetes-externaltrafficpolicy/</guid>
      <description>externalTrafficPolicy 简介 [toc] 一、 什么是externalTrafficPolicy 如果服务需要将外部流量路由到 本地节点或者集群级别的端点，即 service type 为LoadBala</description>
    </item>
    
    <item>
      <title>helm 优雅的使用configmap</title>
      <link>https://www.llmgo.cn/post/helm-use-configmap/</link>
      <pubDate>Wed, 07 Apr 2021 10:59:23 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/helm-use-configmap/</guid>
      <description>helm 使用 configmap 假如我们有一个配置文件config.json目录结构如下 1 2 3 4 5 6 7 8 9 10 11 $ tree . ├── Chart.yaml ├── config │ └── config.json ├── templates │ ├── configmap.yaml │ └</description>
    </item>
    
    <item>
      <title>go 每日练习 01</title>
      <link>https://www.llmgo.cn/post/go-test001/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test001/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strings&amp;#34; ) /* 编写一个程序，从键盘读取输</description>
    </item>
    
    <item>
      <title>go 每日练习 02</title>
      <link>https://www.llmgo.cn/post/go-test002/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test002/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package main import ( &amp;#34;bufio&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;unicode&amp;#34; ) /* 9.敏感词列表 li = [&amp;#3</description>
    </item>
    
    <item>
      <title>go 每日练习 03</title>
      <link>https://www.llmgo.cn/post/go-test003/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test003/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package main /* 写一个 Season 函数，要求接受一个代表月份的数字，然后返回所代表月份所在季节的名称（不用考虑月</description>
    </item>
    
    <item>
      <title>go 每日练习 04</title>
      <link>https://www.llmgo.cn/post/go-test004/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test004/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import &amp;#34;fmt&amp;#34; // fib returns a function that returns // successive Fibonacci numbers. func fib() func() int { a, b := 0, 1 return func() int { a, b = b, a+b return a } } func main() { f := fib() // Function calls are evaluated left-to-right. fmt.Println(f(),</description>
    </item>
    
    <item>
      <title>go 每日练习 05</title>
      <link>https://www.llmgo.cn/post/go-test005/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test005/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 package main /* 编写一个名字为 MySqrt 的函数，计算一个 float64 类型浮点数的平方根，如果参数是一</description>
    </item>
    
    <item>
      <title>go 每日练习 06</title>
      <link>https://www.llmgo.cn/post/go-test006/</link>
      <pubDate>Wed, 07 Apr 2021 10:51:51 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/go-test006/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 package main /* 练习 10.1 vcard.go： 定义结构体 Address 和 V</description>
    </item>
    
  </channel>
</rss>
