<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>devops on 一个小运维的博客</title>
    <link>https://www.llmgo.cn/tags/devops/</link>
    <description>Recent content in devops on 一个小运维的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 07 Apr 2021 11:11:53 +0800</lastBuildDate><atom:link href="https://www.llmgo.cn/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jenkins 利用Build Name and Description Setter插件在build history输出信息</title>
      <link>https://www.llmgo.cn/post/jenkins-output-infomation-in-buildhistory/</link>
      <pubDate>Wed, 07 Apr 2021 11:11:53 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/jenkins-output-infomation-in-buildhistory/</guid>
      <description>Jenkins 利用Build Name and Description Setter插件在build history输出信息 插件名称：Build Name and Description Setter Pipeline语法 1 2 3 4 5 6 7 stage(&amp;#34;Initialization&amp;#34;) { steps</description>
    </item>
    
    <item>
      <title>Jenkins WebHook 自动构建</title>
      <link>https://www.llmgo.cn/post/jenkins-webhook-autobuild/</link>
      <pubDate>Wed, 07 Apr 2021 11:10:17 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/jenkins-webhook-autobuild/</guid>
      <description>Jenkins WebHook 自动构建 [toc] 1. 安装 Gitlab Hook 插件 需要安装两个插件： Gitlab Hook GitLab 2. Jenkins Job设置自动构建 点击右下角的ADCANCED,构建一个Secret token 3. Gitlab 设置web</description>
    </item>
    
    <item>
      <title>nexus-http2https-nginx-config</title>
      <link>https://www.llmgo.cn/post/nexus-http2https-nginx-config/</link>
      <pubDate>Tue, 06 Apr 2021 19:34:41 +0800</pubDate>
      
      <guid>https://www.llmgo.cn/post/nexus-http2https-nginx-config/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  server { listen 443 ssl; server_name nexus.example.com; include /etc/nginx/ssl.conf; client_max_body_size 20m; location ~ ^/(.*){ proxy_pass http://nexus; proxy_set_header REMOTE_ADDR $remote_addr; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-Proto https; proxy_set_header Connection &amp;#34;&amp;#34;; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &amp;#34;upgrade&amp;#34;; } } server { listen 80; server_name nexus.example.com; rewrite ^(.*) https://$server_name$1 permanent; }   </description>
    </item>
    
  </channel>
</rss>
